name: Deploy to Hostinger

on:
  push:
    branches:
      - main

concurrency:
  group: deploy-postpilot
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy to Hostinger
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start ssh-agent and add private key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Ensure known_hosts for the server (adds host key)
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.HOSTINGER_HOST }}" >> ~/.ssh/known_hosts || true
        env:
          HOSTINGER_HOST: ${{ secrets.HOSTINGER_HOST }}

      - name: Remote deploy (SSH)
        env:
          HOST: ${{ secrets.HOSTINGER_HOST }}
          USER: ${{ secrets.HOSTINGER_USER }}
          PORT: ${{ secrets.SSH_PORT }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          GIT_REV: ${{ github.sha }}
          GIT_BRANCH: ${{ github.ref_name }}
        run: |
          # Defaults se não fornecidos
          if [ -z "$PORT" ]; then PORT=22; fi
          if [ -z "$DEPLOY_PATH" ]; then DEPLOY_PATH='/var/www/postpilot'; fi

          echo "Deploying commit $GIT_REV (branch $GIT_BRANCH) to $USER@$HOST:$DEPLOY_PATH (port $PORT)"

          # Passa as variáveis para o shell remoto de forma segura e envia o script via stdin
          ssh -p "$PORT" "$USER@$HOST" "GIT_REV='$GIT_REV' GIT_BRANCH='$GIT_BRANCH' DEPLOY_PATH='$DEPLOY_PATH' bash -s" <<'EOF'
          set -euo pipefail

          # Caminho de deploy (recebido do runner)
          cd "$DEPLOY_PATH" || { echo "Diretório $DEPLOY_PATH não encontrado"; exit 1; }

          # Atualiza repositório
          git fetch --all --prune

          # Faz checkout da branch (cria se necessário)
          if git rev-parse --verify "$GIT_BRANCH" >/dev/null 2>&1; then
            git checkout -f "$GIT_BRANCH"
          else
            git checkout -B "$GIT_BRANCH" "origin/$GIT_BRANCH" || true
          fi

          # Garante que estamos no commit exato que disparou o workflow
          git reset --hard "$GIT_REV"

          # Detecta docker compose v1 ou v2 (caso seu deploy precise)
          if command -v docker-compose >/dev/null 2>&1; then
            DC="docker-compose"
          else
            DC="docker compose"
          fi

          # Pull/build/up caso seu bin/deploy não cuide disso (mantive apenas por segurança)
          $DC pull --ignore-pull-failures || true
          $DC up -d --build || true

          # Executa o deploy usando o seu script (verifique se está no repositório e executável)
          if [ -x ./bin/deploy ]; then
            ./bin/deploy
          else
            echo "Arquivo ./bin/deploy não encontrado ou não é executável. Abortando." >&2
            exit 1
          fi

          echo "Deploy finalizado com sucesso: $GIT_REV"
EOF